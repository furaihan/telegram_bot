:local send [:parse [/system script get tg_sendMessage source]]
:local param1 [:pick $params 0 [:find $params " "]]
:local param2 [:pick $params ([:find $params " "]+1) [:len $params]]
:local param3 [:pick [:pick $params ([:find $params " "]+1) [:len $params]] ([:find [:pick $params ([:find $params " "]+1) [:len $params]] " "]+1) [:len [:pick $params ([:find $params " "]+1) [:len $params]]]]
:if ([:len [:find $param2 " "]]>0) do={
	:set param2 [:pick [:pick $params ([:find $params " "]+1) [:len $params]] 0 [:find [:pick $params ([:find $params " "]+1) [:len $params]] " "]]
} else={
	:set param3 ""
}

:put $params
:put $param1
:put $param2
:put $param3
:put $chatid
:put $from

:local Randoms do={
	:local hour [:pick [/system clock get time] 0 2]
	:local hourx
	:local minute [:pick [/system clock get time] 3 5]
	:local minutex
	:local second [:pick [/system clock get time] 6 8]
	:local secondx
	:local hundred ("1$second")
	:local hundred2 ("1$minute")
	:local hundred3 ("1$hour")
	:local utsec
	:local uthour
	:local utmin
	:local uptime [/system resource get uptime]
	:if ([:len $uptime] = 10) do={:set utsec [:pick $uptime 8 10]; :set utmin [:pick $uptime 5 7]; :set uthour [:pick $uptime 2 4]}
	:if ([:len $uptime] = 11) do={:set utsec [:pick $uptime 9 11]; :set utmin [:pick $uptime 6 8]; :set uthour [:pick $uptime 3 5]}
	:if ([:len $uptime] = 12) do={:set utsec [:pick $uptime 10 12]; :set utmin [:pick $uptime 7 9]; :set uthour [:pick $uptime 4 6]}
	:if ([:len $uptime] = 8) do={:set utsec [:pick $uptime 6 8]; :set utmin [:pick $uptime 3 5]; :set uthour [:pick $uptime 0 2]}
	:if (([:len $uptime] != 12) and ([:len $uptime] != 10) and ([:len $uptime] != 11) and ([:len $uptime] != 8)) do={
		/log error message="Script error please contact the creator"
	}
	:local utsecx ([:pick $utsec 1].[:pick $utsec 0])
	:if (([:pick $hour 1] = [:pick $hour 0]) or ([:pick $minute 1] = [:pick $minute 0]) or ([:pick $second 1] = [:pick $second 0])) do={
		:set hourx (([:pick $hour 1].[:pick $hour 0]) + 1)
		:set minutex (([:pick $minute 1].[:pick $minute 0]) + 1)
		:set secondx (([:pick $second 1].[:pick $second 0]) + 8)
	} else={
		:set hourx ([:pick $hour 1].[:pick $hour 0])
		:set minutex ([:pick $minute 1].[:pick $minute 0])
		:set secondx ([:pick $second 1].[:pick $second 0])
	}
	:if ($hundred2 = $hundred) do={:set hundred2 ($hundred2 + $hour + 1)}
	:if (($hundred3 = $hundred) or ($hundred3 = $hundred2)) do={ :set hundred3 ($hundred3 + $second)}
	:if ($minute + $utsec - $hour < 5) do={
		:set utsec ($utsec + 25)
		:set minute ($minute + 60)
	}
	:local string ("FbPTYV9mjUNF4JWq4y1tD6sjdak0t2m8EbvSOIJ5zSXx2zBzTdVbreMTTtYNu2n0y383CHqASakcmw3NnhAeU6szwSsSqasDaMytTnw0CEzglNhbMyfGUkHfQexNk5C0m4iICxIQmXotuYvGvbJO5XhzGHt3Xb2al4chtzNvTBnniz9RfrdqzTQHixeLh1uvHJ1xP885MLm025D6vzBNmPLWl0GX64zXbABIWudpcfhzrcl2mg11FYXHYAdi5XggVblwizY9Rt4a2Utvmi1mmhbtTX2gVntOh3jotnUOD5nB69d4bnnUGoth")
	:local RandomString
	:set RandomString ([:pick $string ($utsecx + $utmin)].[:pick $string ($utsecx + 50)].[:pick $string ($utsecx + $hour + 29)].[:pick $string ($utsecx)].[:pick $string ($utsec + 21)].[:pick $string ($second + utmin)].[:pick $string ($second + uthour + 100)].[:pick $string ($utsec + 29)].[:pick $string ($utsec + $hourx)].[:pick $string ($second + uthour + 1)].[:pick $string ($second + uthour)].[:pick $string ($secondx + $uthour)].[:pick $string ($minute + $utsec - $hour)].[:pick $string ($minute + $uthour + $secondx)].[:pick $string [:tonum ($hundred + $uthour)]].[:pick $string [:tonum ($hundred2 + $utsec)]].[:pick $string [:tonum $hundred3]].[:pick $string ($utmin + $hourx + $second)].[:pick $string ($hourx + $hour + $second)].[:pick $string ($secondx + $utsec)])
	:return $RandomString
}

:local RandomInteger do={
	:local hour [:pick [/system clock get time] 0 2]
	:local hourx
	:local minute [:pick [/system clock get time] 3 5]
	:local minutex
	:local second [:pick [/system clock get time] 6 8]
	:local secondx
	:local hundred ("1$second")
	:local hundred2 ("1$minute")
	:local hundred3 ("1$hour")
	:local utsec
	:local uthour
	:local utmin
	:local uptime [/system resource get uptime]
	:if ([:len $uptime] = 10) do={:set utsec [:pick $uptime 8 10]; :set utmin [:pick $uptime 5 7]; :set uthour [:pick $uptime 2 4]}
	:if ([:len $uptime] = 11) do={:set utsec [:pick $uptime 9 11]; :set utmin [:pick $uptime 6 8]; :set uthour [:pick $uptime 3 5]}
	:if ([:len $uptime] = 12) do={:set utsec [:pick $uptime 10 12]; :set utmin [:pick $uptime 7 9]; :set uthour [:pick $uptime 4 6]}
	:if ([:len $uptime] = 8) do={:set utsec [:pick $uptime 6 8]; :set utmin [:pick $uptime 3 5]; :set uthour [:pick $uptime 0 2]}
	:if (([:len $uptime] != 12) and ([:len $uptime] != 10) and ([:len $uptime] != 11) and ([:len $uptime] != 8)) do={
		/log error message="Script error please contact the creator"
	}
	:local utsecx ([:pick $utsec 1].[:pick $utsec 0])
	:if (([:pick $hour 1] = [:pick $hour 0]) or ([:pick $minute 1] = [:pick $minute 0]) or ([:pick $second 1] = [:pick $second 0])) do={
		:set hourx (([:pick $hour 1].[:pick $hour 0]) + 1)
		:set minutex (([:pick $minute 1].[:pick $minute 0]) + 1)
		:set secondx (([:pick $second 1].[:pick $second 0]) + 8)
	} else={
		:set hourx ([:pick $hour 1].[:pick $hour 0])
		:set minutex ([:pick $minute 1].[:pick $minute 0])
		:set secondx ([:pick $second 1].[:pick $second 0])
	}
	:if ($hundred2 = $hundred) do={:set hundred2 ($hundred2 + $hour + 1)}
	:if (($hundred3 = $hundred) or ($hundred3 = $hundred2)) do={ :set hundred3 ($hundred3 + $second)}
	:if ($minute + $utsec - $hour < 5) do={
		:set utsec ($utsec + 25)
		:set minute ($minute + 60)
	}
	:local string ("857942409324079924597220765691387859683055723045203124933189298538729356872140414647102436510066373639151713513171131252244546015539855265455581089294375950366038843450537611932543918911222999679829996761162249865561639719443220390417183177772849102022571199645068346947859721422306227212493834056443900559616751")
	:local RandomString
	:set RandomString ([:pick $string ($utsecx + $utmin)].[:pick $string ($utsecx + 50)].[:pick $string ($utsecx + $hour + 29)].[:pick $string ($utsecx)].[:pick $string ($utsec + 21)].[:pick $string ($second + utmin)].[:pick $string ($second + uthour + 100)].[:pick $string ($utsec + 29)].[:pick $string ($utsec + $hourx)].[:pick $string ($second + uthour + 1)].[:pick $string ($second + uthour)].[:pick $string ($secondx + $uthour)].[:pick $string ($minute + $utsec - $hour)].[:pick $string ($minute + $uthour + $secondx)].[:pick $string [:tonum ($hundred + $uthour)]].[:pick $string [:tonum ($hundred2 + $utsec)]].[:pick $string [:tonum $hundred3]].[:pick $string ($utmin + $hourx + $second)].[:pick $string ($hourx + $hour + $second)].[:pick $string ($secondx + $utsec)])
	:return $RandomString
}

:global RandomizeStyle 

if ($params = "method") do={
	:local invalidmode
		set invalidmode ("*Operation is invalid*%0A")
		set invalidmode ($invalidmode."%0A_Valid options are:_%0A")
		set invalidmode ($invalidmode."/randomize method _local_%0A")
		set invalidmode ($invalidmode."/randomize method _internet_%0A")
		$send chat=$chatid text=("$invalidmode") mode="Markdown"
}

if ($param1 = "method") do={
	if (($param2 = "local") or ($param2 = "internet")) do={
		if ($param2 = "local") do={ set RandomizeStyle ("local"); $send chat=$chatid text=("randomization method has been successfully changed to $RandomizeStyle") mode="Markdown" }
		if ($param2 = "internet") do={ set RandomizeStyle ("internet"); $send chat=$chatid text=("randomization method has been successfully changed to $RandomizeStyle") mode="Markdown"}
	} else={
		:local invalidmode
		set invalidmode ("*Option $param2 is invalid*%0A")
		set invalidmode ($invalidmode."%0A_Valid options are:_%0A")
		set invalidmode ($invalidmode."/randomize method _local_%0A")
		set invalidmode ($invalidmode."/randomize method _internet_%0A")
		$send chat=$chatid text=("$invalidmode") mode="Markdown"
	}
}

if ($params = "help") do={
	:local randomizehelp;
	:set randomizehelp ("======== RANDOMIZE COMMAND ========%0A%0A")
	:set randomizehelp ($randomizehelp."*Valid Options Are:*%0A")
	:set randomizehelp ($randomizehelp.">	/randomize method _'local' <or> 'internet'_ - choose a randomization method between local or internet methods%0A")
	:set randomizehelp ($randomizehelp."/randomize string <length> - generate random string (length maximum = 20)%0A")
	:set randomizehelp ($randomizehelp."/randomize number <length> - generate random number (length maximum = 20)%0A")
	$send chat=$chatid text=("$randomizehelp") mode="Markdown"
}
if ($param1 = "string") do={
	if ([typeof [tonum $param2]] = "num") do={
		if ($param2 < 21) do={
			if ($RandomizeStyle = "local") do={
				local rand [$Randoms]
				local randomresult [:pick $rand 0 $param2 ]
				local rslstext ("*Here is your random string*%0A%0A")
				set rslstext ($rslstext." ``` $randomresult ``` ")
				$send chat=$chatid text=("$rslstext") mode="Markdown"
			}
			if ($RandomizeStyle = "internet") do={
				local randomorg [:tostr ([/tool fetch mode=https http-method=get url="https://www.random.org/strings/\?num=1&len=20&digits=on&upperalpha=on&loweralpha=on&unique=on&format=plain&rnd=new" as-value output=user ]->"data")]
				local pickrandomorg [:pick $randomorg 0 $param2]
				local rsistext ("*Here is your random string*%0A%0A")
				set rsistext ($rsistext." ``` $pickrandomorg ``` ")
				$send chat=$chatid text=("$rsistext") mode="Markdown"
			}
			if (($RandomizeStyle != "local") and ($RandomizeStyle != "internet")) do={
				$send chat=$chatid text=("randomize method has not been set, please type _/randomize method_ to continue") mode="Markdown"
			}
		} else={
			$send chat=$chatid text=("Please choose range beetwen *1 - 20*") mode="Markdown"
		}
	} else={
		$send chat=$chatid text=("*Invalid Parameter*%0A%0APlease type /randomize help for more information") mode="Markdown"
	}
}

if ($param1 = "number") do={
	if ([typeof [tonum $param2]] = "num") do={
		if ($param2 < 21) do={
			if ($RandomizeStyle = "local") do={
				local rand [$RandomInteger]
				local randomresult [:pick $rand 0 $param2 ]
				local rslntext ("*Here is your random number*%0A%0A")
				set rslntext ($rslntext." ``` $randomresult ``` ")
				$send chat=$chatid text=("$rslntext") mode="Markdown"
			}
			if ($RandomizeStyle = "internet") do={
				local randomorg [:tostr ([/tool fetch mode=https http-method=get url="https://www.random.org/strings/\?num=1&len=20&digits=on&unique=on&format=plain&rnd=new" as-value output=user ]->"data")]
				local pickrandomorg [:pick $randomorg 0 $param2]
				local rsintext ("*Here is your random number*%0A%0A")
				set rsintext ($rsintext." ``` $pickrandomorg ``` ")
				$send chat=$chatid text=("$rsintext") mode="Markdown"
			}
			if (($RandomizeStyle != "local") and ($RandomizeStyle != "internet")) do={
				$send chat=$chatid text=("randomize method has not been set, please type _/randomize method_ to continue") mode="Markdown"
			}
			
		} else={
			$send chat=$chatid text=("Please choose range beetwen *1 - 20*") mode="Markdown"
		}
	} else={
		$send chat=$chatid text=("*Invalid Parameter*%0A%0APlease type /randomize help for more information") mode="Markdown"
	}
}


